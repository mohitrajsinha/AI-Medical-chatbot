// Mocks generated by Mockito 5.4.2 from annotations
// in chat_gpt_02/test/main/main.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:chat_gpt_02/main.dart' as _i7;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter/services.dart' as _i8;
import 'package:flutter_dotenv/flutter_dotenv.dart' as _i4;
import 'package:flutter_dotenv/src/parser.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatelessElement_1 extends _i1.SmartFake
    implements _i2.StatelessElement {
  _FakeStatelessElement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i2.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [DotEnv].
///
/// See the documentation for Mockito's code generation for more information.
class MockDotEnv extends _i1.Mock implements _i4.DotEnv {
  MockDotEnv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, String> get env => (super.noSuchMethod(
        Invocation.getter(#env),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  void clean() => super.noSuchMethod(
        Invocation.method(
          #clean,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get(
    String? name, {
    String? fallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [name],
          {#fallback: fallback},
        ),
        returnValue: '',
      ) as String);

  @override
  String? maybeGet(
    String? name, {
    String? fallback,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #maybeGet,
        [name],
        {#fallback: fallback},
      )) as String?);

  @override
  _i5.Future<void> load({
    String? fileName = r'.env',
    _i6.Parser? parser = const _i6.Parser(),
    Map<String, String>? mergeWith = const {},
    bool? isOptional = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
          {
            #fileName: fileName,
            #parser: parser,
            #mergeWith: mergeWith,
            #isOptional: isOptional,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void testLoad({
    String? fileInput = r'',
    _i6.Parser? parser = const _i6.Parser(),
    Map<String, String>? mergeWith = const {},
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #testLoad,
          [],
          {
            #fileInput: fileInput,
            #parser: parser,
            #mergeWith: mergeWith,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isEveryDefined(Iterable<String>? vars) => (super.noSuchMethod(
        Invocation.method(
          #isEveryDefined,
          [vars],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [MyApp].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyApp extends _i1.Mock implements _i7.MyApp {
  MockMyApp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget build(_i2.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_0(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i2.Widget);

  @override
  _i2.StatelessElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatelessElement_1(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i2.StatelessElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);

  @override
  void debugFillProperties(_i8.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);

  @override
  _i2.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i2.DiagnosticsNode);

  @override
  List<_i2.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i2.DiagnosticsNode>[],
      ) as List<_i2.DiagnosticsNode>);

  @override
  String toString({_i2.DiagnosticLevel? minLevel = _i2.DiagnosticLevel.info}) =>
      super.toString();
}
